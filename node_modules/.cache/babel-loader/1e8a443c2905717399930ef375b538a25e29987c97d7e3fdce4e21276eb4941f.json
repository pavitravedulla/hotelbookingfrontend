{"ast":null,"code":"var _jsxFileName = \"D:\\\\hotel booking\\\\frontend-hotelbooking\\\\src\\\\component\\\\admin\\\\ManageRoomPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport Pagination from '../common/Pagination';\nimport RoomResult from '../common/RoomResult';\nimport AdminLayout from './AdminLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageRoomPage = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [selectedAvailability, setSelectedAvailability] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [roomsPerPage] = useState(5);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await ApiService.getAllRooms();\n        let allRooms = response.roomList;\n        // Add dummy bookings count\n        allRooms = allRooms.map(room => ({\n          ...room,\n          bookingsCount: Math.floor(Math.random() * 10)\n        }));\n        setRooms(allRooms);\n        setFilteredRooms(allRooms);\n        setUniqueCities(allRooms);\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    };\n    const fetchRoomTypes = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        setRoomTypes(types);\n      } catch (error) {\n        console.error('Error fetching room types:', error.message);\n      }\n    };\n    const setUniqueCities = allRooms => {\n      const uniqueCities = Array.from(new Set(allRooms.map(room => room.hotelName)));\n      setCities(uniqueCities);\n    };\n    fetchRooms();\n    fetchRoomTypes();\n  }, []);\n  const handleRoomTypeChange = e => {\n    setSelectedRoomType(e.target.value);\n    filterRooms();\n  };\n  const handleCityChange = e => {\n    setSelectedCity(e.target.value);\n    filterRooms();\n  };\n  const handleAvailabilityChange = e => {\n    setSelectedAvailability(e.target.value);\n    filterRooms();\n  };\n  const filterRooms = () => {\n    let filtered = rooms;\n    if (selectedRoomType) {\n      filtered = filtered.filter(room => room.roomType === selectedRoomType);\n    }\n    if (selectedCity) {\n      filtered = filtered.filter(room => room.hotelName === selectedCity);\n    }\n    if (selectedAvailability) {\n      // Assuming all are available, but if selected 'Available', keep all\n      if (selectedAvailability === 'Available') {\n        filtered = filtered; // all\n      } else {\n        filtered = []; // none, since no 'Not Available'\n      }\n    }\n    setFilteredRooms(filtered);\n    setCurrentPage(1); // Reset to first page after filtering\n  };\n\n  // Pagination\n  const indexOfLastRoom = currentPage * roomsPerPage;\n  const indexOfFirstRoom = indexOfLastRoom - roomsPerPage;\n  const currentRooms = filteredRooms.slice(indexOfFirstRoom, indexOfLastRoom);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(AdminLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-rooms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-room-filter-div\",\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-select-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Filter by Room Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedRoomType,\n            onChange: handleRoomTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), roomTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: type,\n              children: type\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-room-button\",\n            onClick: () => navigate('/admin/add-room'),\n            children: \"Add Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoomResult, {\n        roomSearchResults: currentRooms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        roomsPerPage: roomsPerPage,\n        totalRooms: filteredRooms.length,\n        currentPage: currentPage,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageRoomPage, \"+yw8ZAbz1tV9ElC0TkMUV00TLQM=\", false, function () {\n  return [useNavigate];\n});\n_c = ManageRoomPage;\nexport default ManageRoomPage;\nvar _c;\n$RefreshReg$(_c, \"ManageRoomPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ApiService","Pagination","RoomResult","AdminLayout","jsxDEV","_jsxDEV","ManageRoomPage","_s","rooms","setRooms","filteredRooms","setFilteredRooms","roomTypes","setRoomTypes","cities","setCities","selectedRoomType","setSelectedRoomType","selectedCity","setSelectedCity","selectedAvailability","setSelectedAvailability","currentPage","setCurrentPage","roomsPerPage","navigate","fetchRooms","response","getAllRooms","allRooms","roomList","map","room","bookingsCount","Math","floor","random","setUniqueCities","error","console","message","fetchRoomTypes","types","getRoomTypes","uniqueCities","Array","from","Set","hotelName","handleRoomTypeChange","e","target","value","filterRooms","handleCityChange","handleAvailabilityChange","filtered","filter","roomType","indexOfLastRoom","indexOfFirstRoom","currentRooms","slice","paginate","pageNumber","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","alignItems","onChange","type","onClick","roomSearchResults","totalRooms","length","_c","$RefreshReg$"],"sources":["D:/hotel booking/frontend-hotelbooking/src/component/admin/ManageRoomPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport Pagination from '../common/Pagination';\nimport RoomResult from '../common/RoomResult';\nimport AdminLayout from './AdminLayout';\n\nconst ManageRoomPage = () => {\n  const [rooms, setRooms] = useState([]);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [selectedAvailability, setSelectedAvailability] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [roomsPerPage] = useState(5);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await ApiService.getAllRooms();\n        let allRooms = response.roomList;\n        // Add dummy bookings count\n        allRooms = allRooms.map(room => ({ ...room, bookingsCount: Math.floor(Math.random() * 10) }));\n        setRooms(allRooms);\n        setFilteredRooms(allRooms);\n        setUniqueCities(allRooms);\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    };\n\n    const fetchRoomTypes = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        setRoomTypes(types);\n      } catch (error) {\n        console.error('Error fetching room types:', error.message);\n      }\n    };\n\n    const setUniqueCities = (allRooms) => {\n      const uniqueCities = Array.from(new Set(allRooms.map(room => room.hotelName)));\n      setCities(uniqueCities);\n    };\n\n    fetchRooms();\n    fetchRoomTypes();\n  }, []);\n\n  const handleRoomTypeChange = (e) => {\n    setSelectedRoomType(e.target.value);\n    filterRooms();\n  };\n\n  const handleCityChange = (e) => {\n    setSelectedCity(e.target.value);\n    filterRooms();\n  };\n\n  const handleAvailabilityChange = (e) => {\n    setSelectedAvailability(e.target.value);\n    filterRooms();\n  };\n\n  const filterRooms = () => {\n    let filtered = rooms;\n    if (selectedRoomType) {\n      filtered = filtered.filter((room) => room.roomType === selectedRoomType);\n    }\n    if (selectedCity) {\n      filtered = filtered.filter((room) => room.hotelName === selectedCity);\n    }\n    if (selectedAvailability) {\n      // Assuming all are available, but if selected 'Available', keep all\n      if (selectedAvailability === 'Available') {\n        filtered = filtered; // all\n      } else {\n        filtered = []; // none, since no 'Not Available'\n      }\n    }\n    setFilteredRooms(filtered);\n    setCurrentPage(1); // Reset to first page after filtering\n  };\n\n  // Pagination\n  const indexOfLastRoom = currentPage * roomsPerPage;\n  const indexOfFirstRoom = indexOfLastRoom - roomsPerPage;\n  const currentRooms = filteredRooms.slice(indexOfFirstRoom, indexOfLastRoom);\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <AdminLayout>\n      <div className='all-rooms'>\n        <h2>All Rooms</h2>\n        <div className='all-room-filter-div' style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <div className='filter-select-div'>\n            <label>Filter by Room Type:</label>\n            <select value={selectedRoomType} onChange={handleRoomTypeChange}>\n              <option value=\"\">All</option>\n              {roomTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </select>\n            <button className='add-room-button' onClick={() => navigate('/admin/add-room')}>\n              Add Room\n            </button>\n          </div>\n        </div>\n\n        <RoomResult roomSearchResults={currentRooms} />\n\n        <Pagination\n          roomsPerPage={roomsPerPage}\n          totalRooms={filteredRooms.length}\n          currentPage={currentPage}\n          paginate={paginate}\n        />\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default ManageRoomPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}