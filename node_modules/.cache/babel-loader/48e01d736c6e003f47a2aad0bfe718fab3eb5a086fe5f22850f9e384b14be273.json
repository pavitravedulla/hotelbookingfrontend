{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import ApiService from'../../service/ApiService';import Pagination from'../common/Pagination';import RoomResult from'../common/RoomResult';import AdminLayout from'./AdminLayout';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ManageRoomPage=()=>{const[rooms,setRooms]=useState([]);const[filteredRooms,setFilteredRooms]=useState([]);const[roomTypes,setRoomTypes]=useState([]);const[cities,setCities]=useState([]);const[selectedRoomType,setSelectedRoomType]=useState('');const[selectedCity,setSelectedCity]=useState('');const[selectedAvailability,setSelectedAvailability]=useState('');const[currentPage,setCurrentPage]=useState(1);const[roomsPerPage]=useState(5);const navigate=useNavigate();useEffect(()=>{const fetchRooms=async()=>{try{const response=await ApiService.getAllRooms();let allRooms=response.roomList;// Add dummy bookings count\nallRooms=allRooms.map(room=>({...room,bookingsCount:Math.floor(Math.random()*10)}));setRooms(allRooms);setFilteredRooms(allRooms);setUniqueCities(allRooms);}catch(error){console.error('Error fetching rooms:',error.message);}};const fetchRoomTypes=async()=>{try{const types=await ApiService.getRoomTypes();setRoomTypes(types);}catch(error){console.error('Error fetching room types:',error.message);}};const setUniqueCities=allRooms=>{const uniqueCities=Array.from(new Set(allRooms.map(room=>room.hotelName)));setCities(uniqueCities);};fetchRooms();fetchRoomTypes();},[]);const handleRoomTypeChange=e=>{setSelectedRoomType(e.target.value);filterRooms();};const handleCityChange=e=>{setSelectedCity(e.target.value);filterRooms();};const handleAvailabilityChange=e=>{setSelectedAvailability(e.target.value);filterRooms();};const filterRooms=()=>{let filtered=rooms;if(selectedRoomType){filtered=filtered.filter(room=>room.roomType===selectedRoomType);}if(selectedCity){filtered=filtered.filter(room=>room.hotelName===selectedCity);}if(selectedAvailability){// Assuming all are available, but if selected 'Available', keep all\nif(selectedAvailability==='Available'){filtered=filtered;// all\n}else{filtered=[];// none, since no 'Not Available'\n}}setFilteredRooms(filtered);setCurrentPage(1);// Reset to first page after filtering\n};// Pagination\nconst indexOfLastRoom=currentPage*roomsPerPage;const indexOfFirstRoom=indexOfLastRoom-roomsPerPage;const currentRooms=filteredRooms.slice(indexOfFirstRoom,indexOfLastRoom);// Change page\nconst paginate=pageNumber=>setCurrentPage(pageNumber);return/*#__PURE__*/_jsx(AdminLayout,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"all-rooms\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"All Rooms\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"all-room-filter-div\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-select-div\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Filter by City:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedCity,onChange:handleCityChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"All\"}),cities.map(city=>/*#__PURE__*/_jsx(\"option\",{value:city,children:city},city))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-select-div\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Filter by Room Type:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedRoomType,onChange:handleRoomTypeChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"All\"}),roomTypes.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type,children:type},type))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-select-div\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Filter by Availability:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedAvailability,onChange:handleAvailabilityChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"All\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Available\",children:\"Available\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Not Available\",children:\"Not Available\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"add-room-button\",onClick:()=>navigate('/admin/add-room'),children:\"Add Room\"})]}),/*#__PURE__*/_jsx(RoomResult,{roomSearchResults:currentRooms}),/*#__PURE__*/_jsx(Pagination,{roomsPerPage:roomsPerPage,totalRooms:filteredRooms.length,currentPage:currentPage,paginate:paginate})]})});};export default ManageRoomPage;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ApiService","Pagination","RoomResult","AdminLayout","jsx","_jsx","jsxs","_jsxs","ManageRoomPage","rooms","setRooms","filteredRooms","setFilteredRooms","roomTypes","setRoomTypes","cities","setCities","selectedRoomType","setSelectedRoomType","selectedCity","setSelectedCity","selectedAvailability","setSelectedAvailability","currentPage","setCurrentPage","roomsPerPage","navigate","fetchRooms","response","getAllRooms","allRooms","roomList","map","room","bookingsCount","Math","floor","random","setUniqueCities","error","console","message","fetchRoomTypes","types","getRoomTypes","uniqueCities","Array","from","Set","hotelName","handleRoomTypeChange","e","target","value","filterRooms","handleCityChange","handleAvailabilityChange","filtered","filter","roomType","indexOfLastRoom","indexOfFirstRoom","currentRooms","slice","paginate","pageNumber","children","className","onChange","city","type","onClick","roomSearchResults","totalRooms","length"],"sources":["C:/Users/ADMIN/Desktop/CICD/frontend-hotelbooking1/frontend-hotelbooking/src/component/admin/ManageRoomPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport Pagination from '../common/Pagination';\nimport RoomResult from '../common/RoomResult';\nimport AdminLayout from './AdminLayout';\n\nconst ManageRoomPage = () => {\n  const [rooms, setRooms] = useState([]);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [selectedAvailability, setSelectedAvailability] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [roomsPerPage] = useState(5);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await ApiService.getAllRooms();\n        let allRooms = response.roomList;\n        // Add dummy bookings count\n        allRooms = allRooms.map(room => ({ ...room, bookingsCount: Math.floor(Math.random() * 10) }));\n        setRooms(allRooms);\n        setFilteredRooms(allRooms);\n        setUniqueCities(allRooms);\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    };\n\n    const fetchRoomTypes = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        setRoomTypes(types);\n      } catch (error) {\n        console.error('Error fetching room types:', error.message);\n      }\n    };\n\n    const setUniqueCities = (allRooms) => {\n      const uniqueCities = Array.from(new Set(allRooms.map(room => room.hotelName)));\n      setCities(uniqueCities);\n    };\n\n    fetchRooms();\n    fetchRoomTypes();\n  }, []);\n\n  const handleRoomTypeChange = (e) => {\n    setSelectedRoomType(e.target.value);\n    filterRooms();\n  };\n\n  const handleCityChange = (e) => {\n    setSelectedCity(e.target.value);\n    filterRooms();\n  };\n\n  const handleAvailabilityChange = (e) => {\n    setSelectedAvailability(e.target.value);\n    filterRooms();\n  };\n\n  const filterRooms = () => {\n    let filtered = rooms;\n    if (selectedRoomType) {\n      filtered = filtered.filter((room) => room.roomType === selectedRoomType);\n    }\n    if (selectedCity) {\n      filtered = filtered.filter((room) => room.hotelName === selectedCity);\n    }\n    if (selectedAvailability) {\n      // Assuming all are available, but if selected 'Available', keep all\n      if (selectedAvailability === 'Available') {\n        filtered = filtered; // all\n      } else {\n        filtered = []; // none, since no 'Not Available'\n      }\n    }\n    setFilteredRooms(filtered);\n    setCurrentPage(1); // Reset to first page after filtering\n  };\n\n  // Pagination\n  const indexOfLastRoom = currentPage * roomsPerPage;\n  const indexOfFirstRoom = indexOfLastRoom - roomsPerPage;\n  const currentRooms = filteredRooms.slice(indexOfFirstRoom, indexOfLastRoom);\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <AdminLayout>\n      <div className='all-rooms'>\n        <h2>All Rooms</h2>\n        <div className='all-room-filter-div'>\n          <div className='filter-select-div'>\n            <label>Filter by City:</label>\n            <select value={selectedCity} onChange={handleCityChange}>\n              <option value=\"\">All</option>\n              {cities.map((city) => (\n                <option key={city} value={city}>\n                  {city}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className='filter-select-div'>\n            <label>Filter by Room Type:</label>\n            <select value={selectedRoomType} onChange={handleRoomTypeChange}>\n              <option value=\"\">All</option>\n              {roomTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className='filter-select-div'>\n            <label>Filter by Availability:</label>\n            <select value={selectedAvailability} onChange={handleAvailabilityChange}>\n              <option value=\"\">All</option>\n              <option value=\"Available\">Available</option>\n              <option value=\"Not Available\">Not Available</option>\n            </select>\n          </div>\n          <button className='add-room-button' onClick={() => navigate('/admin/add-room')}>\n            Add Room\n          </button>\n        </div>\n\n        <RoomResult roomSearchResults={currentRooms} />\n\n        <Pagination\n          roomsPerPage={roomsPerPage}\n          totalRooms={filteredRooms.length}\n          currentPage={currentPage}\n          paginate={paginate}\n        />\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default ManageRoomPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}