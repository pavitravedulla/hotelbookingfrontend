{"ast":null,"code":"var _jsxFileName = \"D:\\\\hotel booking\\\\frontend-hotelbooking\\\\src\\\\component\\\\common\\\\RoomSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport ApiService from '../../service/ApiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomSearch = ({\n  handleSearchResult\n}) => {\n  _s();\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [roomType, setRoomType] = useState('');\n  const [location, setLocation] = useState('');\n  const [locations, setLocations] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        const defaultTypes = [\"Single\", \"Double\", \"Deluxe\", \"Suite\", \"Family\"];\n        const uniqueTypes = Array.from(new Set([...defaultTypes, ...types]));\n        setRoomTypes(uniqueTypes);\n\n        // Fetch locations from rooms\n        const roomsRes = await ApiService.getAllRooms();\n        const allRooms = (roomsRes === null || roomsRes === void 0 ? void 0 : roomsRes.roomList) || [];\n        const uniqueLocations = Array.from(new Set(allRooms.map(room => room.hotelName)));\n        setLocations(uniqueLocations);\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setRoomTypes([\"Single\", \"Double\", \"Deluxe\", \"Suite\", \"Family\"]);\n        setLocations([]);\n      }\n    };\n    fetchData();\n  }, []);\n\n  /**This methods is going to be used to show errors */\n  const showError = (message, timeout = 5000) => {\n    setError(message);\n    setTimeout(() => {\n      setError('');\n    }, timeout);\n  };\n\n  /**THis is going to be used to fetch available rooms from database base on seach data that'll be passed in */\n  const handleInternalSearch = async () => {\n    if (!startDate || !endDate || !roomType) {\n      showError('Please select all fields');\n      return false;\n    }\n    try {\n      // Convert startDate to the desired format\n      const formattedStartDate = startDate ? startDate.toISOString().split('T')[0] : null;\n      const formattedEndDate = endDate ? endDate.toISOString().split('T')[0] : null;\n      // Call the API to fetch available rooms\n      const response = await ApiService.getAvailableRoomsByDateAndType(formattedStartDate, formattedEndDate, roomType);\n\n      // Check if the response is successful\n      if (response.statusCode === 200) {\n        let rooms = response.roomList;\n        if (location) {\n          rooms = rooms.filter(room => room.hotelName === location);\n        }\n        if (rooms.length === 0) {\n          showError('Room not currently available for this date range on the selected room type and location.');\n          return;\n        }\n        handleSearchResult(rooms);\n        setError('');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      showError(\" error occurred: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Check-in Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: startDate,\n          onChange: date => setStartDate(date),\n          dateFormat: \"dd/MM/yyyy\",\n          placeholderText: \"Select Check-in Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Check-out Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: endDate,\n          onChange: date => setEndDate(date),\n          dateFormat: \"dd/MM/yyyy\",\n          placeholderText: \"Select Check-out Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Room Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: roomType,\n          onChange: e => setRoomType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true,\n            value: \"\",\n            children: \"Select Room Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), roomTypes.map(roomType => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: roomType,\n            children: roomType\n          }, roomType, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"home-search-button\",\n        onClick: handleInternalSearch,\n        children: \"Search Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomSearch, \"Un2bRbjfRsyH+EjfcI7Zl8H+REo=\");\n_c = RoomSearch;\nexport default RoomSearch;\nvar _c;\n$RefreshReg$(_c, \"RoomSearch\");","map":{"version":3,"names":["React","useState","useEffect","DatePicker","ApiService","jsxDEV","_jsxDEV","RoomSearch","handleSearchResult","_s","startDate","setStartDate","endDate","setEndDate","roomType","setRoomType","location","setLocation","locations","setLocations","roomTypes","setRoomTypes","error","setError","fetchData","types","getRoomTypes","defaultTypes","uniqueTypes","Array","from","Set","roomsRes","getAllRooms","allRooms","roomList","uniqueLocations","map","room","hotelName","console","message","showError","timeout","setTimeout","handleInternalSearch","formattedStartDate","toISOString","split","formattedEndDate","response","getAvailableRoomsByDateAndType","statusCode","rooms","filter","length","_error$response","_error$response$data","data","children","className","fileName","_jsxFileName","lineNumber","columnNumber","selected","onChange","date","dateFormat","placeholderText","value","e","target","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/hotel booking/frontend-hotelbooking/src/component/common/RoomSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport ApiService from '../../service/ApiService';\n\nconst RoomSearch = ({ handleSearchResult }) => {\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [roomType, setRoomType] = useState('');\n  const [location, setLocation] = useState('');\n  const [locations, setLocations] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        const defaultTypes = [\"Single\", \"Double\", \"Deluxe\", \"Suite\", \"Family\"];\n        const uniqueTypes = Array.from(new Set([...defaultTypes, ...types]));\n        setRoomTypes(uniqueTypes);\n\n        // Fetch locations from rooms\n        const roomsRes = await ApiService.getAllRooms();\n        const allRooms = roomsRes?.roomList || [];\n        const uniqueLocations = Array.from(new Set(allRooms.map(room => room.hotelName)));\n        setLocations(uniqueLocations);\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setRoomTypes([\"Single\", \"Double\", \"Deluxe\", \"Suite\", \"Family\"]);\n        setLocations([]);\n      }\n    };\n    fetchData();\n  }, []);\n\n  /**This methods is going to be used to show errors */\n  const showError = (message, timeout = 5000) => {\n    setError(message);\n    setTimeout(() => {\n      setError('');\n    }, timeout);\n  };\n\n  /**THis is going to be used to fetch available rooms from database base on seach data that'll be passed in */\n  const handleInternalSearch = async () => {\n    if (!startDate || !endDate || !roomType) {\n      showError('Please select all fields');\n      return false;\n    }\n    try {\n      // Convert startDate to the desired format\n      const formattedStartDate = startDate ? startDate.toISOString().split('T')[0] : null;\n      const formattedEndDate = endDate ? endDate.toISOString().split('T')[0] : null;\n      // Call the API to fetch available rooms\n      const response = await ApiService.getAvailableRoomsByDateAndType(formattedStartDate, formattedEndDate, roomType);\n\n      // Check if the response is successful\n      if (response.statusCode === 200) {\n        let rooms = response.roomList;\n        if (location) {\n          rooms = rooms.filter(room => room.hotelName === location);\n        }\n        if (rooms.length === 0) {\n          showError('Room not currently available for this date range on the selected room type and location.');\n          return;\n        }\n        handleSearchResult(rooms);\n        setError('');\n      }\n    } catch (error) {\n      showError(\" error occurred: \" + (error.response?.data?.message || error.message));\n    }\n  };\n\n  return (\n    <section>\n      <div className=\"search-container\">\n        <div className=\"search-field\">\n          <label>Check-in Date</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            dateFormat=\"dd/MM/yyyy\"\n            placeholderText=\"Select Check-in Date\"\n          />\n        </div>\n        <div className=\"search-field\">\n          <label>Check-out Date</label>\n          <DatePicker\n            selected={endDate}\n            onChange={(date) => setEndDate(date)}\n            dateFormat=\"dd/MM/yyyy\"\n            placeholderText=\"Select Check-out Date\"\n          />\n        </div>\n\n        <div className=\"search-field\">\n          <label>Room Type</label>\n          <select value={roomType} onChange={(e) => setRoomType(e.target.value)}>\n            <option disabled value=\"\">\n              Select Room Type\n            </option>\n            {roomTypes.map((roomType) => (\n              <option key={roomType} value={roomType}>\n                {roomType}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button className=\"home-search-button\" onClick={handleInternalSearch}>\n          Search Rooms\n        </button>\n      </div>\n      {error && <p className=\"error-message\">{error}</p>}\n    </section>\n  );\n};\n\nexport default RoomSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}