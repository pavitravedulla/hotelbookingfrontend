{"ast":null,"code":"var _jsxFileName = \"D:\\\\hotel booking\\\\frontend-hotelbooking\\\\src\\\\component\\\\admin\\\\ManageRoomPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport Pagination from '../common/Pagination';\nimport RoomResult from '../common/RoomResult';\nimport AdminLayout from './AdminLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageRoomPage = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [roomsPerPage] = useState(5);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await ApiService.getAllRooms();\n        let allRooms = response.roomList;\n        // Add dummy bookings count\n        allRooms = allRooms.map(room => ({\n          ...room,\n          bookingsCount: Math.floor(Math.random() * 10)\n        }));\n        setRooms(allRooms);\n        setFilteredRooms(allRooms);\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    };\n    const fetchRoomTypes = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        setRoomTypes(types);\n      } catch (error) {\n        console.error('Error fetching room types:', error.message);\n      }\n    };\n    fetchRooms();\n    fetchRoomTypes();\n  }, []);\n  const handleRoomTypeChange = e => {\n    setSelectedRoomType(e.target.value);\n    filterRooms(e.target.value);\n  };\n  const filterRooms = type => {\n    if (type === '') {\n      setFilteredRooms(rooms);\n    } else {\n      const filtered = rooms.filter(room => room.roomType === type);\n      setFilteredRooms(filtered);\n    }\n    setCurrentPage(1); // Reset to first page after filtering\n  };\n\n  // Pagination\n  const indexOfLastRoom = currentPage * roomsPerPage;\n  const indexOfFirstRoom = indexOfLastRoom - roomsPerPage;\n  const currentRooms = filteredRooms.slice(indexOfFirstRoom, indexOfLastRoom);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(AdminLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-rooms\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-room-filter-div\",\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-select-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Filter by Room Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedRoomType,\n            onChange: handleRoomTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), roomTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: type,\n              children: type\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-room-button\",\n            onClick: () => navigate('/admin/add-room'),\n            children: \"Add Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoomResult, {\n        roomSearchResults: currentRooms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        roomsPerPage: roomsPerPage,\n        totalRooms: filteredRooms.length,\n        currentPage: currentPage,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageRoomPage, \"seuBRJGvN5tyU7xPngAIMkE7Y5E=\", false, function () {\n  return [useNavigate];\n});\n_c = ManageRoomPage;\nexport default ManageRoomPage;\nvar _c;\n$RefreshReg$(_c, \"ManageRoomPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ApiService","Pagination","RoomResult","AdminLayout","jsxDEV","_jsxDEV","ManageRoomPage","_s","rooms","setRooms","filteredRooms","setFilteredRooms","roomTypes","setRoomTypes","selectedRoomType","setSelectedRoomType","currentPage","setCurrentPage","roomsPerPage","navigate","fetchRooms","response","getAllRooms","allRooms","roomList","map","room","bookingsCount","Math","floor","random","error","console","message","fetchRoomTypes","types","getRoomTypes","handleRoomTypeChange","e","target","value","filterRooms","type","filtered","filter","roomType","indexOfLastRoom","indexOfFirstRoom","currentRooms","slice","paginate","pageNumber","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","alignItems","onChange","onClick","roomSearchResults","totalRooms","length","_c","$RefreshReg$"],"sources":["D:/hotel booking/frontend-hotelbooking/src/component/admin/ManageRoomPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport Pagination from '../common/Pagination';\nimport RoomResult from '../common/RoomResult';\nimport AdminLayout from './AdminLayout';\n\nconst ManageRoomPage = () => {\n  const [rooms, setRooms] = useState([]);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [selectedRoomType, setSelectedRoomType] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [roomsPerPage] = useState(5);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await ApiService.getAllRooms();\n        let allRooms = response.roomList;\n        // Add dummy bookings count\n        allRooms = allRooms.map(room => ({ ...room, bookingsCount: Math.floor(Math.random() * 10) }));\n        setRooms(allRooms);\n        setFilteredRooms(allRooms);\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    };\n\n    const fetchRoomTypes = async () => {\n      try {\n        const types = await ApiService.getRoomTypes();\n        setRoomTypes(types);\n      } catch (error) {\n        console.error('Error fetching room types:', error.message);\n      }\n    };\n\n    fetchRooms();\n    fetchRoomTypes();\n  }, []);\n\n  const handleRoomTypeChange = (e) => {\n    setSelectedRoomType(e.target.value);\n    filterRooms(e.target.value);\n  };\n\n  const filterRooms = (type) => {\n    if (type === '') {\n      setFilteredRooms(rooms);\n    } else {\n      const filtered = rooms.filter((room) => room.roomType === type);\n      setFilteredRooms(filtered);\n    }\n    setCurrentPage(1); // Reset to first page after filtering\n  };\n\n  // Pagination\n  const indexOfLastRoom = currentPage * roomsPerPage;\n  const indexOfFirstRoom = indexOfLastRoom - roomsPerPage;\n  const currentRooms = filteredRooms.slice(indexOfFirstRoom, indexOfLastRoom);\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <AdminLayout>\n      <div className='all-rooms'>\n        <h2>All Rooms</h2>\n        <div className='all-room-filter-div' style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <div className='filter-select-div'>\n            <label>Filter by Room Type:</label>\n            <select value={selectedRoomType} onChange={handleRoomTypeChange}>\n              <option value=\"\">All</option>\n              {roomTypes.map((type) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </select>\n            <button className='add-room-button' onClick={() => navigate('/admin/add-room')}>\n              Add Room\n            </button>\n          </div>\n        </div>\n\n        <RoomResult roomSearchResults={currentRooms} />\n\n        <Pagination\n          roomsPerPage={roomsPerPage}\n          totalRooms={filteredRooms.length}\n          currentPage={currentPage}\n          paginate={paginate}\n        />\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default ManageRoomPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}